{
  "hash": "aa4b03ad4ff4a16a227f62ccc24b0652",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Phylogenetic tree with a geographic map\"\nauthor: \"Poppy J Hesketh Best\"\ndate: \"2025-08-28\"\ncategories: [code, analysis, phylogeny, R, ggtree]\nimage: \"mockup.png\"\n---\n\n# The situation\n\nIn a recent meeting, I was shown an impressive figure and asked if I could attempt to recreate it. It was an amazing graphic, one that immediately struck me as having been created in Python. Unfortunately, I am far more proficient in R than in Python, especially when it comes to producing publication-quality figures. So I went about spending the next two weeks in seeing if it could be done in R.\n\nLets take a look at our opponent, Figure 2 from the publication: [\"Emergence and spread of SARS-CoV-2 lineage B.1.620 with variant of concern-like mutations and deletions\"](https://pmc.ncbi.nlm.nih.gov/articles/PMC8486757/pdf/41467_2021_Article_26055.pdf). Im not really sure how copyrights work,so I am not going to include the image here, but I made a mock-up of what I want to achieve.\n\n![Tree with map projections mockup.](mockup.png){width=50%}\n\nWe have a circular maximum likelihood tree with projections onto a map of Europe. The treeâ€™s tip points are colored according to country, with lines extending from each tip to an \"inner circle\", from which they continue outward to the corresponding geographic coordinates. I like the use of this inner circle, it prevent the connective lines from crossing directly across the tree, retaining the structure of the branches.\n\nThere are a few obvious problems that struck me as I set out on this endeavor, the first being that circular trees will have polar coordinates (originating from the tree root), and the map with have cartographic coordinates. While I have not really considered the two together before, it seems obvious that they would not mix well.\n\nThe first thing I did was check to see if this publication has any code avaialble, and they did. The authors of this really neat paper detailed their analysis extremely well and can be found on their [GitHub page](https://github.com/evogytis/B.1.620-in-Europe/blob/main/scripts/B.1.620-circular-map.ipynb).\n\nIt appears that following is going on in this code:\n\n1. Load SARS-CoV-2 tree and associated metadata, including sequence information, locations, travel data, and color schemes.\n2. Collapse trivial branches to simplify the tree and select a specific subtree of interest.\n3. Scale branch lengths by the genome alignment length.\n4. Sort branches geographically or by predefined country order to improve visualization.\n5. Deduplicate closely related tips from the same location to reduce tree complexity.\n6. Plot the phylogenetic tree in polar (circular) coordinates, including angle calculations, normalization of branch heights, scale bar with ticks and labels, computation of polar coordinates for nodes, curved internal branches, and tip plotting.\n7. Add branches to the plot using line collections to render the tree structure.\n8. Overlay the tree onto a geographic map using a `cartopy` projection.\n9. Highlight tips representing travelers and geographically significant locations with larger markers, outer circles, and colors reflecting country or travel status.\n10. Add a legend for selected countries and finalize the plot by removing ticks, labels, and spines, ensuring proper aspect ratio and layout.\n\nIm sure it'll be ten nice and easy steps.\n\n> ðŸ¤” **Why not use `phytools`??** (which is accompanied by a very well maintained [blog](https://blog.phytools.org/2019/03/projecting-phylogenetic-tree-onto-map.html)). This was a viable option, but I have two minor gripes, (i) the plots are not the most aesthetically pleasing ones (very shallow, I know), and (ii) I could not seem to achieve a circular tree with map projections. So with that noted, lets get started with recreating this in R.\n\n# The Trial\n\n## Preparing test data\n\n### Phylogenetic tree\n\nCreating a test phylogenetic tree is easily achieved as such using `ggtree`, for which the resources are avaialble [here](https://yulab-smu.top/treedata-book/chapter4.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# echo: true\n# eval: true\n# warning: false\n# load library\nlibrary(ggtree)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nggtree v3.16.3 Learn more at https://yulab-smu.top/contribution-tree-data/\n\nPlease cite:\n\nGuangchuang Yu. Using ggtree to visualize data on tree-like structures.\nCurrent Protocols in Bioinformatics. 2020, 69:e96. doi:10.1002/cpbi.96\n```\n\n\n:::\n\n```{.r .cell-code}\n# set random seed\nset.seed(1234)\n\n# create a test tree and plot\ntree <- rtree(50)\ntree_p <- ggtree(tree) + \n    layout_inward_circular(xlim=15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n```\n\n\n:::\n\n```{.r .cell-code}\ntree_p\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nNext lets get the tip identities from this test data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# echo: true\n# eval: true\n# warning: false\n# load library\ntree_data <- tree_p$data\nhead(tree_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 9\n  parent  node branch.length label isTip     x     y branch angle\n   <int> <int>         <dbl> <chr> <lgl> <dbl> <dbl>  <dbl> <dbl>\n1     58     1         0.318 t2    TRUE   4.28    48   4.12  346.\n2     59     2         0.634 t47   TRUE   5.55    49   5.24  353.\n3     59     3         0.127 t40   TRUE   5.05    50   4.98  360 \n4     57     4         0.423 t20   TRUE   3.88    47   3.67  338.\n5     56     5         0.914 t44   TRUE   3.87    46   3.42  331.\n6     55     6         0.468 t3    TRUE   3.17    45   2.94  324 \n```\n\n\n:::\n\n```{.r .cell-code}\n# collect just the tips\n```\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}