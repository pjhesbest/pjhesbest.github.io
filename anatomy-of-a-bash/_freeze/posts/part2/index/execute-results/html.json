{
  "hash": "483ef8d516ba5614af799532f839d8f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 2: Starting your script with a bang\"\nauthor: \"Poppy J Hesketh Best\"\ndate: \"2025-08-28\"\ncategories: [code, analysis, beginners, \"Anatomy of a BASH\", \"Guide\"]\nimage: \"profile.png\"\nexecute:\n  echo: true\n  eval: false\n  engine: knitr\n---\n\nHere we cover creating help messages, \n\n**[Part 1]()** ⋘ Part 2 ⋙ **[Part 3]()**\n\n# Starting your script with a bang\n\nThe the first line of a BASH script is called a *shebang*, and it specifies which interpreter/language will be used when executing the script. You might see a few different versions of this, and they can change the way your script operates.\n\n- `#!/usr/bin/env bash` : This is **generally the safest choice in an HPC environment** if your script requires bash-specific features. Using env  ensures the bash interpreter is found via the environment's PATH, which can be modified by the module system. Useful in HPC environments, where modules may alter the available shell or software versions.\n- `#!/bin/bash` : This assumes bash is located in /bin/bash, which is usually true for most Linux-based HPC systems. However, this can be less flexible if the HPC system has bash installed in non-standard locations or if you need different versions of bash.\n- `#!/bin/sh` : If your script doesn’t require any bash-specific features and you just need a simple, lightweight script for tasks like job submission, basic file handling, or running commands.\n- `#!/bin/sh -` : This is a more niche use case, and usually, you won’t need to run your HPC scripts in a login shell unless your environment setup is complex and isn't automatically inherited from your job scheduler.\n\n## Printing a help message\n\nA help message is just a chunk of text, and unlike in R and Python is actually detached from the argument definement (covered below). This means, that just because you write it in your help message, does not actually mean it is reflected in the defined arguments. Because of this, I prefer to have the help message written before writing the argument definition, as it helps remind me exactly what I need. For this you simply define a function called `Help()`, and open up the function with curly brackets `{`. The help message itself it just generated using `echo`. After the message is written, you close the function with another curly bracket `}`. The help message can be called simply by using the new command `Help`, in your script.\n\nPosition wise this should be placed before the argument definement, as one flag will to call the help function (`-h`), it needs to be defined before.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nHelp(){\n    echo \"Help message for the script: my script\n        Required:\n            -i      path to input file\n            -o      path to output file\n        Optional:\n            -t      number of threads (default : 4)\n            -h      print this help message and exit\n}\n\n# Now you can call the Help function\nHelp\n```\n:::\n\n\n## Defining arguments\n\nOne way to achieve a multi-sample functioning script very simply is to feed files into your script, rather than have the target file/values defined in the script. The most basic way to do this in BASH is to just add them to the end of you line of code:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n# write the example script\necho \"#!/usr/bin/env bash\neval \"$(conda shell.bash hook)\"\nconda activate spades\nspades.py -1 ${1} -2 ${2} -o ${3}\nconda deactivate\n\" > assembly.sh\n\n# This script could be run as follows\nassembly.sh sample-1_R1.fastq.gz sample-1_R2.fastq.gz sample-1_assembly-out\n```\n:::\n\n\nYour inputs are defined sequentially, so the first file/value following `assembly.sh` becomes the variable `\\${1}`, the second `\\${2}`, so on. This is not the most user-friendly, and if you are going to be sharing scripts with colleagues it can be clunky for others. This is why its valuable to write script that have help mesages and defined flags. Using the same example as above, but this time there is a input flag for the required files (R1 and R2 reads), and an output directory:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nassembly.sh -i sample-1_R1.fastq.gz -r sample-2_R1.fastq.gz -o sample-1_assembly-out\n```\n:::\n\n\nFirst, we need to define the arguments for the script, and this is achieved using the `while getopts a\\:b:c:h option; do`. Which looks scarier than it actually is. This is utilising a `while` statement to search for input flags, before here as `i\\:o:t:h`, which just means it will search for `-i`, `-o`, `-t`, and `-h`. Next those flags are defined into variables, for example the input flag it is defined as such: `i)input=${OPTARG};;`.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nwhile getopts i:o:t:Q:h option\ndo \n    case \"${option}\" in \n        i)input=${OPTARG};;\n        o)output=${OPTARG};;\n        t)threads=${OPTARG};;\n        Q)QCSPAdes=false;;\n        h)Help; exit;;\n    esac\ndone\n```\n:::\n\n\nNow for the rest of the script, whenever you call the variable `${input}`, the script will utilised whatever file/value was provided when the script was run (e.g. `-i path/to/contigs.fasta`). This is done for all the flags you need for your script to operate as intended while providing flexibility. The input doesnt need to be file paths, it can be values, chunks of text.\n\nYou can change this to have as many or as few arguments as you want. It is important to ensure that your help message (encoded in the function `Help` as described above), is as written to reflect the contents of the `while` argument. When the help message is called (e.g. `assembly.sh -h`), the script will terminate immediately after printing the help message, you acheive this by having the default bash function `exit` in `h)Help; exit;;`. \n\nA final feature you can take advatage of is utilising a `true`/`false` statement in the argument definement (e.g `Q)QCSPAdes=false;;`). For example, the assembler  SPAdes perform an optional read error correction by default, but if you perform error correction prior you may want to disable this with the SPAdes specific flag `--only-assembler`. In the example script the the flag `-Q` is added for when you want SPAdes to only perform the assembly, or omit the flag it in order to resort to the default setting, which in the example is false (i.e. perform/do not disable error correction). If you do this, you will later have to include an `if` statement in order to enact this in both a `true` and `false` scenario (this will be covered later).\n\n## Producing error messages \n\nWhen you begin incorporating flags, its important that you set up some error messages to help people troubleshoot why the script might not be working for them. As by default, the error messages produced by BASH might not be the most informative to someone unfamiliar with the language.\n\nRecall in the help message there where two types of input flags, required and optional. Lets go about creating error messages based on those two categories, starting with the required arguemnts. In a scenario where a user did not define a required arguments, we need to inform users what they have missed. We will do this with `if` statements.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nif [[ -z ${inpput} ]]; then echo -e \"ERROR: -i, input is missing\"; Help, exit 1; fi\n```\n:::\n\nThe logic of this `if`  statement, is in the situation where `-i` is not defined - the `-z` string - which means that the if statement is true if the string is empty (i.e. human language: `\\${input}` does not exist/is empty because `-i` was not provided), then the following action is performed. That action is to print a message (`\"ERROR: -i, input is missing\"`), then call the `Help` function, which will print the help message to remind the user what the flags of the script are, then close the script with exit 1. If the statemet is not true (i.e human language: `\\${input}` is not empty, before a input was provided), the `if` statement ends (`fi`, for finish), and the script continues. There are additional features to `if` statements that will be covered later, but they are very powerful tools to utilise in your script.\n\nFor optional argument, we don't need to colapse the script if no file or value was provide when the scrip was run, instead default value/path can be utilised. In the help message, we stated that the default number of threads was 4. So we set it as such using another `if` statement. \n\n\n::: {.cell}\n\n```{.sh .cell-code}\nif [[ -z \"${threads}\" ]]; then threads=4; fi\n```\n:::\n\n\nThe same logic as before is applied, except this time we set the threads variable to the default value before ending the `if` statement (`threads=4; fi`). Now in the script, unless a `-t` value was given, whenever `${threads}` is called the default value will be used. You can even add more to this statement, to include a message to inform the user that the default value has been applied. \n\nHave a go and write the following `if` statements:\n\n1. For the optional `-t` flag, add a message that the number of threads is the default value.\n2. An error message for the scenario where `-o` has not been provided\n3. Make the `-o` an optional flag and default the output directory to the current working directory\n\n::: {.callout-tip collapse=\"true\" title=\"Solution to 1\"}\n\nSince `${threads}` has a value, it is useful to use the variable instead of a hard number, as at some point in the future you might change the value of the default, and you want to have a script where you need to change that value in as few places as possible. In the present example, you would only have to change that value in two places: the `if` statement and the `Help` message.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nif [[ -z \"${threads}\" ]]; then \n  threads=4; \n  echo \"Number of threads not specified, utilising default value ${threads}\nfi\n```\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Solution to 2\"}\n\nSimply need to add a echo to the if statement. This can be personalised hower you want as long as it is informative to the user.\n\n::: {.cell}\n\n```{.sh .cell-code}\nif [[ -z ${output} ]]; then echo -e \"ERROR: -o, output is missing\"\n  Help, exit 1\nfi\n```\n:::\n\n\n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Solution to 3\"}\n\nTo define the output as the working directory you will need to use the function `$(pwd)`, which print the full path to the curren working directory. That is how we define the output. Same as in (1), we will use the variable `${output}` to report the output path.\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nif [[ -z ${output} ]]; then \n  output=$(pwd)\nfi\n\n# Print message to inform of the working directory\necho -e \"Output path is missing, defaulting to current directory: ${output}\"\n```\n:::\n\n\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}